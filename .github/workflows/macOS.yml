name: Build macOS Package Installer

on:
  push:
    branches:
      - main
env:
  PACKAGING_REPO: https://github.com/osquery/osquery-packaging
  PACKAGING_COMMIT: 4caa2c54f0d893c1efa47932571046bbce156c52
  SUBMODULE_CACHE_VERSION: 2

jobs:
  build:
    runs-on: ${{ matrix.os }}


    strategy:
      matrix:
        build_type: [Release, Debug]
        architecture: [x86_64, arm64]
        os: [macos-12]


        exclude:
          - build_type: Debug
            architecture: arm64
            

    steps:
      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo "VALUE=$(($sysctl -n hw.logicalcpu) + 1))" >> $GITHUB_OUTPUT
      - name: setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="workspace/build"
          rel_src_path="workspace/src"
          rel_ccache_path="workspace/ccache"
          rel_downloads_path="workspace/downloads"
          rel_install_path="workspace/install"
          rel_package_data_path="workspace/package_data"
          rel_packaging_path="workspace/osquery-packaging"
          rel_package_build_path="workspace/package-build"

          mkdir -p ${rel_build_path} \
                 ${rel_ccache_path} \
                 ${rel_downloads_path} \
                 ${rel_install_path} \
                 ${rel_package_data_path} \
                 ${rel_package_build_path}

          echo "SOURCE=$(pwd)/${rel_src_path}" >> $GITHUB_OUTPUT
          echo "REL_SOURCE=${rel_src_path}" >> $GITHUB_OUTPUT
          echo "BINARY=$(pwd)/${rel_build_path}" >> $GITHUB_OUTPUT
          echo "CCACHE=$(pwd)/${rel_ccache_path}" >> $GITHUB_OUTPUT
          echo "DOWNLOADS=$(pwd)/${rel_downloads_path}" >> $GITHUB_OUTPUT
          echo "INSTALL=$(pwd)/${rel_install_path}" >> $GITHUB_OUTPUT
          echo "PACKAGING=$(pwd)/${rel_packaging_path}" >> $GITHUB_OUTPUT
          echo "PACKAGE_DATA=$(pwd)/${rel_package_data_path}" >> $GITHUB_OUTPUT
          echo "REL_PACKAGE_BUILD=${rel_package_build_path}" >> $GITHUB_OUTPUT
          echo "PACKAGE_BUILD=$(pwd)/${rel_package_build_path}" >> $GITHUB_OUTPUT

      
      - name: Clone the osquery repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}
            
      


      
      - name: Update the cache (ccache)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}
  
          key: |
            ccache_${{ matrix.os }}_${{ matrix.architecture }}_${{ matrix.build_type }}_${{ github.sha }}
  
          restore-keys: |
            ccache_${{ matrix.os }}_${{ matrix.architecture }}_${{ matrix.build_type }}
      - name: Update the cache (git submodules)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules
  
          key: |
            gitmodules_${{ matrix.os }}_${{ matrix.architecture }}_${{env.SUBMODULE_CACHE_VERSION}}_${{ github.sha }}
  
          restore-keys: |
            gitmodules_${{ matrix.os }}_${{ matrix.architecture }}_${{env.SUBMODULE_CACHE_VERSION}}
  
      - name: Update the cache (downloads)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}
  
          key: |
            downloads_${{ matrix.os }}_${{ matrix.architecture }}_${{ github.sha }}
  
          restore-keys: |
            downloads_${{ matrix.os }}_${{ matrix.architecture }}
      - name: Update the git submodules
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        run: |
          git submodule sync --recursive
  
      - name: Install build dependencies
        run: |
          brew install \
            ccache \
            flex \
            bison \
            coreutils \
            gnu-sed
      - name: Install tests dependencies
        id: install_test_deps
        run: |
          python_root="/usr/local/Frameworks/Python.framework/Versions/Current"
  
          ${python_root}/bin/pip3 install setuptools \
                       pexpect==3.3 \
                       psutil \
                       timeout_decorator \
                       six \
                       thrift==0.11.0 \
                       osquery
  
          echo "PYTHON_ROOT=${python_root}" >> $GITHUB_OUTPUT
      
      # - name: Clone the osquery repository
      #   working-directory: ${{ steps.build_paths.outputs.REL_SOURCE }}
      #   run:
      #     git clone https://github.com/osquery/osquery.git
          
      - name: Install CMake
        shell: bash
        run: |
          ${{ steps.build_paths.outputs.REL_SOURCE }}/tools/ci/scripts/macos/install_cmake.sh \
            "${{ steps.build_paths.outputs.DOWNLOADS }}" \
            "${{ steps.build_paths.outputs.INSTALL }}" \
            "3.21.4"
      - name: Select the Xcode version
        shell: bash
        id: xcode_selector
        run: |
          xcode_path="/Applications/Xcode_14.1.app/Contents/Developer"
          echo "PATH=${path}" >> $GITHUB_OUTPUT
  
          sudo xcode-select -s "${xcode_path}"
  
          echo "DEPLOYMENT_TARGET=10.15" >> $GITHUB_OUTPUT

      - name: Select the debug symbols options
        shell: bash
        id: debug_symbols_settings
        run: |
          if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
            echo "VALUE=ON" >> $GITHUB_OUTPUT
          else
            echo "VALUE=OFF" >> $GITHUB_OUTPUT
          fi
      - name: Configure the project
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.REL_SOURCE }}/osquery
  
        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}
  
        run: |
          cmake -G "Unix Makefiles" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.architecture }}" \
            -DCMAKE_OSX_DEPLOYMENT_TARGET="${{ steps.xcode_selector.outputs.DEPLOYMENT_TARGET }}" \
            -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" \
            -DOSQUERY_BUILD_TESTS=ON \
            -DOSQUERY_NO_DEBUG_SYMBOLS=${{ steps.debug_symbols_settings.outputs.VALUE }} \
            -DPython3_ROOT_DIR=${{ steps.install_test_deps.outputs.PYTHON_ROOT }} \
            ${{ steps.build_paths.outputs.SOURCE }}

          
